%%-*- mode: erlang -*-

[

    
    {mochiweb, [
            {ssl_accept_timeout_ms, 30000}
        ,   {http_req_recv_timeout_ms, 30000}
    ]},
    

    {ssl, [{session_lifetime, 10}]},


    {estatsd, [
        {flush_interval, 60000}, % every minute
        {graphite_host, "graphite.miranetworks.net"},
        {graphite_port, 2003}

        %handled by cuttlefish
        %{path_prefix, "mira_bind_router_mux.estatsd.per_minute.dev"} % Replace '.dev' with hostname.
    ]},


    { mira_bdb_port_driver, [
        %FIXME { bulk_account_ids_callback, {config, get_bulk_account_ids} },
        %FIXME { bulk_account_init, {schema, provision} },

        
%        {http_listeners, [
%            {http_localhost_8070,  { {127,0,0,1}, 8070 } }
%        ]},
%        {https_listeners, [
%            {https_localhost_8070, { {127,0,0,1}, 8070, "./priv/ssl/certificate.pem", "./priv/ssl/key.pem"} }
%        ]},
        


        %% Put your custom config here
        
        {config, {file, "config/last_known_good_config.json"}}
    ]},

    %% Kernel config
    {kernel, [
        {error_logger, {file, "./log/kernel.log"}}
    ]},

    %% SASL config
    {sasl, [
            {sasl_error_logger, {file, "log/sasl-error.log"}}
        ,   {errlog_type, error}
        ,   {error_logger_mf_dir, "log/sasl"}      % Log directory
        ,   {error_logger_mf_maxbytes, 10485760}   % 10 MB max file size
        ,   {error_logger_mf_maxfiles, 5}           % 5 files max
    ]},

    

    % Eroq config
    {mira_eroq, [

        {alarms_callback, { bdb_eroq_callbacks, alarm_callback}},
        {queue_watch_callback, { bdb_eroq_callbacks, qw_callback}},

        {queue_watch_config, [
            
            { "EXQS", "^example_queue$", "size" },
            { "EXxS", "^example_queue_dlq$", "size" }
            
            ,
            
            { "TQS", "^test_queue$", "size" },
            { "TxS", "^test_queue_dlq$", "size" },
            
            { "GSQS", "^graphite_slap$", "size" },
            { "GSxS", "^graphite_slap_dlq$", "size" }
            
            ]
        },

        {alarm_config, [
            {"STATIC", [
                
                "example_queue"
                
                ,
                
                "test_queue",
                
                "graphite_slap"
                
            ], {include, ""}, [{static, 60}]}, %Must be static for 60 seconds

            {"DLQ", [
                
                "example_queue_dlq"
                
                ,
                
                "test_queue_dlq",
                
                "graphite_slap_dlq"
                
            ], {include, ""}, [{max_size, 0}]}
        ]
        }
    ]},

    {mira_uuid_server, [
        {odbc_use_for_config, false},
        {node_mac, "112233445566"}
    ]},

    {mira_cfg_client_api, [

        {config_url,            "https://cfgbus.miranetworks.net:30313/config/get"},
        {version_poll_url,      "https://cfgbus.miranetworks.net:30313/config/version"},
        {publish_version_url,   "https://cfgbus.miranetworks.net:30313/config/set_version"},

        %handled by cuttlefish
        %{client_key,    "bdb@myhost"},

        %handled by cuttlefish
        %This is the url that will be called by the config bus when config has changed
        %{feedback_url,  "http://MY_EXTERNAL_IP:8070/config/notify"},

        {poll_rate,     120000},

        {feedback_mod, cfg_object_config_util},
        {feedback_fun, refresh}
    ]},


    {mira_cfg_generic_object, [

        {generic_objects, [

            { bdb_config, [

                {object_key,"YOUR-OBJECT-KEY"},

                % To use config in this config file
                {cfg_method, local}, 
                {local_config_param, bdb_config },

                % To use config blob in an external file
                % {cfg_method, file},
                % {file_path, "config/last_known_good_config.json"},

                % To use config from the config bus
                % {cfg_method, cfg_api}, 

                {callback_mod,bdb_cfg_server}
            ]}

        ]},

        { bdb_config, [
                {"key1", "value1"}
            ,   {"key2", "value2"}
        ]}

    ]}


].

